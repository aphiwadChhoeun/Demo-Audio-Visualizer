!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=4)}([function(t,e,r){var n=r(1),i=r(2);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[t.i,i,""]]);var a={insert:"head",singleton:!1};n(i,a);t.exports=i.locals||{}},function(t,e,r){"use strict";var n,i=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},a=function(){var t={};return function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}t[e]=r}return t[e]}}(),s=[];function o(t){for(var e=-1,r=0;r<s.length;r++)if(s[r].identifier===t){e=r;break}return e}function u(t,e){for(var r={},n=[],i=0;i<t.length;i++){var a=t[i],u=e.base?a[0]+e.base:a[0],h=r[u]||0,l="".concat(u," ").concat(h);r[u]=h+1;var c=o(l),f={css:a[1],media:a[2],sourceMap:a[3]};-1!==c?(s[c].references++,s[c].updater(f)):s.push({identifier:l,updater:m(f,e),references:1}),n.push(l)}return n}function h(t){var e=document.createElement("style"),n=t.attributes||{};if(void 0===n.nonce){var i=r.nc;i&&(n.nonce=i)}if(Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),"function"==typeof t.insert)t.insert(e);else{var s=a(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var l,c=(l=[],function(t,e){return l[t]=e,l.filter(Boolean).join("\n")});function f(t,e,r,n){var i=r?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(t.styleSheet)t.styleSheet.cssText=c(e,i);else{var a=document.createTextNode(i),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(a,s[e]):t.appendChild(a)}}function p(t,e,r){var n=r.css,i=r.media,a=r.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),a&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var d=null,_=0;function m(t,e){var r,n,i;if(e.singleton){var a=_++;r=d||(d=h(e)),n=f.bind(null,r,a,!1),i=f.bind(null,r,a,!0)}else r=h(e),n=p.bind(null,r,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(r)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=i());var r=u(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var n=0;n<r.length;n++){var i=o(r[n]);s[i].references--}for(var a=u(t,e),h=0;h<r.length;h++){var l=o(r[h]);0===s[l].references&&(s[l].updater(),s.splice(l,1))}r=a}}}},function(t,e,r){(e=r(3)(!1)).push([t.i,'body{width:100vw;height:100vh;margin:0;padding:0}body *{font-family:"Roboto", sans-serif;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-rendering:optimizeLegibility}.hidden{position:absolute;left:-1000;top:0}#app{margin:0;padding:0;width:100%;height:100%;position:relative;overflow:hidden;background-color:#222831;color:#eee}#app .music__title{position:absolute;left:50%;top:4rem;transform:translateX(-50%);font-size:4rem;text-transform:uppercase;font-weight:bold;letter-spacing:1rem;color:#eee}#app #visual{position:fixed;width:100%;height:100%;filter:url("#liquid-effect")}#app .button{background:transparent;border:none;border-radius:50%;cursor:pointer;font-size:1rem;color:#222831;width:200px;height:200px;display:flex;align-items:center;justify-content:center}#app .button#btn__play{display:none;position:absolute;left:50%;top:50%;transform:translate(-50%, -50%)}#app .button:focus{border:none;outline:none}#app .button .shape__play{width:0;height:0;display:block;border-top:50px solid transparent;border-left:50px solid #222831;border-bottom:50px solid transparent}#app .button .shape__pause{display:block;display:none}#app .button .shape__pause:before{content:"";display:inline-block;margin-right:1rem;width:25px;height:100px;background:#222831}#app .button .shape__pause:after{content:"";display:inline-block;width:25px;height:100px;background:#222831}#app .links{position:absolute;width:100%;bottom:1rem;left:1rem}#app .links a{margin-right:1rem;font-size:1.5rem;color:#eee}#app .links a:active{color:#eee}#app .bar{position:absolute;background:#32e0c4}#app .circle__container{position:absolute;left:50%;top:50%;transform:translate(-50%, -50%)}#app .circle__container:first-child .circle{background:#32e0c4}#app .circle__container .circle{position:absolute;width:50px;height:50px;border-radius:50%;background-image:linear-gradient(180deg, transparent 10%, #32e0c4 60%);transform:translate(-50%, -50%)}\n',""]),t.exports=e},function(t,e,r){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r=function(t,e){var r=t[1]||"",n=t[3];if(!n)return r;if(e&&"function"==typeof btoa){var i=(s=n,o=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),"/*# ".concat(u," */")),a=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[r].concat(a).concat([i]).join("\n")}var s,o,u;return[r].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(r,"}"):r})).join("")},e.i=function(t,r,n){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(n)for(var a=0;a<this.length;a++){var s=this[a][0];null!=s&&(i[s]=!0)}for(var o=0;o<t.length;o++){var u=[].concat(t[o]);n&&i[u[0]]||(r&&(u[2]?u[2]="".concat(r," and ").concat(u[2]):u[2]=r),e.push(u))}},e}},function(t,e,r){"use strict";r.r(e);r(0);function n(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function i(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}
/*!
 * GSAP 3.3.2
 * https://greensock.com
 *
 * @license Copyright 2008-2020, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/var a,s,o,u,h,l,c,f,p,d,_,m,g,v,y,b,x,w,T,k,M,C,O,A,S,D={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},P={duration:.5,overwrite:!1,delay:0},E=1e8,R=2*Math.PI,z=R/4,B=0,F=Math.sqrt,L=Math.cos,I=Math.sin,N=function(t){return"string"==typeof t},U=function(t){return"function"==typeof t},X=function(t){return"number"==typeof t},j=function(t){return void 0===t},q=function(t){return"object"==typeof t},Y=function(t){return!1!==t},V=function(){return"undefined"!=typeof window},G=function(t){return U(t)||N(t)},H=Array.isArray,W=/(?:-?\.?\d|\.)+/gi,Q=/[-+=.]*\d+[.e\-+]*\d*[e\-\+]*\d*/g,Z=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,J=/[-+=.]*\d+(?:\.|e-|e)*\d*/gi,$=/\(([^()]+)\)/i,K=/[+-]=-?[\.\d]+/,tt=/[#\-+.]*\b[a-z\d-=+%.]+/gi,et={},rt={},nt=function(t){return(rt=St(t,et))&&lr},it=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},at=function(t,e){return!e&&console.warn(t)},st=function(t,e){return t&&(et[t]=e)&&rt&&(rt[t]=e)||et},ot=function(){return 0},ut={},ht=[],lt={},ct={},ft={},pt=30,dt=[],_t="",mt=function(t){var e,r,n=t[0];if(q(n)||U(n)||(t=[t]),!(e=(n._gsap||{}).harness)){for(r=dt.length;r--&&!dt[r].targetTest(n););e=dt[r]}for(r=t.length;r--;)t[r]&&(t[r]._gsap||(t[r]._gsap=new Be(t[r],e)))||t.splice(r,1);return t},gt=function(t){return t._gsap||mt(ee(t))[0]._gsap},vt=function(t,e){var r=t[e];return U(r)?t[e]():j(r)&&t.getAttribute(e)||r},yt=function(t,e){return(t=t.split(",")).forEach(e)||t},bt=function(t){return Math.round(1e5*t)/1e5||0},xt=function(t,e){for(var r=e.length,n=0;t.indexOf(e[n])<0&&++n<r;);return n<r},wt=function(t,e,r){var n,i=X(t[1]),a=(i?2:1)+(e<2?0:1),s=t[a];if(i&&(s.duration=t[1]),s.parent=r,e){for(n=s;r&&!("immediateRender"in n);)n=r.vars.defaults||{},r=Y(r.vars.inherit)&&r.parent;s.immediateRender=Y(n.immediateRender),e<2?s.runBackwards=1:s.startAt=t[a-1]}return s},Tt=function(){var t,e,r=ht.length,n=ht.slice(0);for(lt={},ht.length=0,t=0;t<r;t++)(e=n[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},kt=function(t,e,r,n){ht.length&&Tt(),t.render(e,r,n),ht.length&&Tt()},Mt=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(tt).length<2?e:t},Ct=function(t){return t},Ot=function(t,e){for(var r in e)r in t||(t[r]=e[r]);return t},At=function(t,e){for(var r in e)r in t||"duration"===r||"ease"===r||(t[r]=e[r])},St=function(t,e){for(var r in e)t[r]=e[r];return t},Dt=function t(e,r){for(var n in r)e[n]=q(r[n])?t(e[n]||(e[n]={}),r[n]):r[n];return e},Pt=function(t,e){var r,n={};for(r in t)r in e||(n[r]=t[r]);return n},Et=function(t){var e=t.parent||a,r=t.keyframes?At:Ot;if(Y(t.inherit))for(;e;)r(t,e.vars.defaults),e=e.parent||e._dp;return t},Rt=function(t,e,r,n){void 0===r&&(r="_first"),void 0===n&&(n="_last");var i=e._prev,a=e._next;i?i._next=a:t[r]===e&&(t[r]=a),a?a._prev=i:t[n]===e&&(t[n]=i),e._next=e._prev=e.parent=null},zt=function(t,e){!t.parent||e&&!t.parent.autoRemoveChildren||t.parent.remove(t),t._act=0},Bt=function(t){for(var e=t;e;)e._dirty=1,e=e.parent;return t},Ft=function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t},Lt=function(t){return t._repeat?It(t._tTime,t=t.duration()+t._rDelay)*t:0},It=function(t,e){return(t/=e)&&~~t===t?~~t-1:~~t},Nt=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},Ut=function(t){return t._end=bt(t._start+(t._tDur/Math.abs(t._ts||t._rts||1e-8)||0))},Xt=function(t,e){var r;if((e._time||e._initted&&!e._dur)&&(r=Nt(t.rawTime(),e),(!e._dur||Zt(0,e.totalDuration(),r)-e._tTime>1e-8)&&e.render(r,!0)),Bt(t)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(r=t;r._dp;)r.rawTime()>=0&&r.totalTime(r._tTime),r=r._dp;t._zTime=-1e-8}},jt=function(t,e,r,n){return e.parent&&zt(e),e._start=bt(r+e._delay),e._end=bt(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),function(t,e,r,n,i){void 0===r&&(r="_first"),void 0===n&&(n="_last");var a,s=t[n];if(i)for(a=e[i];s&&s[i]>a;)s=s._prev;s?(e._next=s._next,s._next=e):(e._next=t[r],t[r]=e),e._next?e._next._prev=e:t[n]=e,e._prev=s,e.parent=e._dp=t}(t,e,"_first","_last",t._sort?"_start":0),t._recent=e,n||Xt(t,e),t},qt=function(t,e){return(et.ScrollTrigger||it("scrollTrigger",e))&&et.ScrollTrigger.create(e,t)},Yt=function(t,e,r,n){return je(t,e),t._initted?!r&&t._pt&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&l!==we.frame?(ht.push(t),t._lazy=[e,n],1):void 0:1},Vt=function(t,e,r){var n=t._repeat,i=bt(e)||0;return t._dur=i,t._tDur=n?n<0?1e10:bt(i*(n+1)+t._rDelay*n):i,t._time>i&&(t._time=i,t._tTime=Math.min(t._tTime,t._tDur)),!r&&Bt(t.parent),t.parent&&Ut(t),t},Gt=function(t){return t instanceof Le?Bt(t):Vt(t,t._dur)},Ht={_start:0,endTime:ot},Wt=function t(e,r){var n,i,a=e.labels,s=e._recent||Ht,o=e.duration()>=E?s.endTime(!1):e._dur;return N(r)&&(isNaN(r)||r in a)?"<"===(n=r.charAt(0))||">"===n?("<"===n?s._start:s.endTime(s._repeat>=0))+(parseFloat(r.substr(1))||0):(n=r.indexOf("="))<0?(r in a||(a[r]=o),a[r]):(i=+(r.charAt(n-1)+r.substr(n+1)),n>1?t(e,r.substr(0,n-1))+i:o+i):null==r?o:+r},Qt=function(t,e){return t||0===t?e(t):e},Zt=function(t,e,r){return r<t?t:r>e?e:r},Jt=function(t){return(t+"").substr((parseFloat(t)+"").length)},$t=[].slice,Kt=function(t,e){return t&&q(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&q(t[0]))&&!t.nodeType&&t!==s},te=function(t,e,r){return void 0===r&&(r=[]),t.forEach((function(t){var n;return N(t)&&!e||Kt(t,1)?(n=r).push.apply(n,ee(t)):r.push(t)}))||r},ee=function(t,e){return!N(t)||e||!o&&Te()?H(t)?te(t,e):Kt(t)?$t.call(t,0):t?[t]:[]:$t.call(u.querySelectorAll(t),0)},re=function(t){return t.sort((function(){return.5-Math.random()}))},ne=function(t){if(U(t))return t;var e=q(t)?t:{each:t},r=De(e.ease),n=e.from||0,i=parseFloat(e.base)||0,a={},s=n>0&&n<1,o=isNaN(n)||s,u=e.axis,h=n,l=n;return N(n)?h=l={center:.5,edges:.5,end:1}[n]||0:!s&&o&&(h=n[0],l=n[1]),function(t,s,c){var f,p,d,_,m,g,v,y,b,x=(c||e).length,w=a[x];if(!w){if(!(b="auto"===e.grid?0:(e.grid||[1,E])[1])){for(v=-E;v<(v=c[b++].getBoundingClientRect().left)&&b<x;);b--}for(w=a[x]=[],f=o?Math.min(b,x)*h-.5:n%b,p=o?x*l/b-.5:n/b|0,v=0,y=E,g=0;g<x;g++)d=g%b-f,_=p-(g/b|0),w[g]=m=u?Math.abs("y"===u?_:d):F(d*d+_*_),m>v&&(v=m),m<y&&(y=m);"random"===n&&re(w),w.max=v-y,w.min=y,w.v=x=(parseFloat(e.amount)||parseFloat(e.each)*(b>x?x-1:u?"y"===u?x/b:b:Math.max(b,x/b))||0)*("edges"===n?-1:1),w.b=x<0?i-x:i,w.u=Jt(e.amount||e.each)||0,r=r&&x<0?Ae(r):r}return x=(w[t]-w.min)/w.max||0,bt(w.b+(r?r(x):x)*w.v)+w.u}},ie=function(t){var e=t<1?Math.pow(10,(t+"").length-2):1;return function(r){return Math.floor(Math.round(parseFloat(r)/t)*t*e)/e+(X(r)?0:Jt(r))}},ae=function(t,e){var r,n,i=H(t);return!i&&q(t)&&(r=i=t.radius||E,t.values?(t=ee(t.values),(n=!X(t[0]))&&(r*=r)):t=ie(t.increment)),Qt(e,i?U(t)?function(e){return n=t(e),Math.abs(n-e)<=r?n:e}:function(e){for(var i,a,s=parseFloat(n?e.x:e),o=parseFloat(n?e.y:0),u=E,h=0,l=t.length;l--;)(i=n?(i=t[l].x-s)*i+(a=t[l].y-o)*a:Math.abs(t[l]-s))<u&&(u=i,h=l);return h=!r||u<=r?t[h]:e,n||h===e||X(e)?h:h+Jt(e)}:ie(t))},se=function(t,e,r,n){return Qt(H(t)?!e:!0===r?!!(r=0):!n,(function(){return H(t)?t[~~(Math.random()*t.length)]:(r=r||1e-5)&&(n=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((t+Math.random()*(e-t))/r)*r*n)/n}))},oe=function(t,e,r){return Qt(r,(function(r){return t[~~e(r)]}))},ue=function(t){for(var e,r,n,i,a=0,s="";~(e=t.indexOf("random(",a));)n=t.indexOf(")",e),i="["===t.charAt(e+7),r=t.substr(e+7,n-e-7).match(i?tt:W),s+=t.substr(a,e-a)+se(i?r:+r[0],+r[1],+r[2]||1e-5),a=n+1;return s+t.substr(a,t.length-a)},he=function(t,e,r,n,i){var a=e-t,s=n-r;return Qt(i,(function(e){return r+((e-t)/a*s||0)}))},le=function(t,e,r){var n,i,a,s=t.labels,o=E;for(n in s)(i=s[n]-e)<0==!!r&&i&&o>(i=Math.abs(i))&&(a=n,o=i);return a},ce=function(t,e,r){var n,i,a=t.vars,s=a[e];if(s)return n=a[e+"Params"],i=a.callbackScope||t,r&&ht.length&&Tt(),n?s.apply(i,n):s.call(i)},fe=function(t){return zt(t),t.progress()<1&&ce(t,"onInterrupt"),t},pe=function(t){var e=(t=!t.name&&t.default||t).name,r=U(t),n=e&&!r&&t.init?function(){this._props=[]}:t,i={init:ot,render:er,add:Ue,kill:nr,modifier:rr,rawVars:0},a={targetTest:0,get:0,getSetter:Je,aliases:{},register:0};if(Te(),t!==n){if(ct[e])return;Ot(n,Ot(Pt(t,i),a)),St(n.prototype,St(i,Pt(t,a))),ct[n.prop=e]=n,t.targetTest&&(dt.push(n),ut[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}st(e,n),t.register&&t.register(lr,n,sr)},de={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},_e=function(t,e,r){return 255*(6*(t=t<0?t+1:t>1?t-1:t)<1?e+(r-e)*t*6:t<.5?r:3*t<2?e+(r-e)*(2/3-t)*6:e)+.5|0},me=function(t,e,r){var n,i,a,s,o,u,h,l,c,f,p=t?X(t)?[t>>16,t>>8&255,255&t]:0:de.black;if(!p){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),de[t])p=de[t];else if("#"===t.charAt(0))4===t.length&&(n=t.charAt(1),i=t.charAt(2),a=t.charAt(3),t="#"+n+n+i+i+a+a),p=[(t=parseInt(t.substr(1),16))>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(p=f=t.match(W),e){if(~t.indexOf("="))return p=t.match(Q),r&&p.length<4&&(p[3]=1),p}else s=+p[0]%360/360,o=+p[1]/100,n=2*(u=+p[2]/100)-(i=u<=.5?u*(o+1):u+o-u*o),p.length>3&&(p[3]*=1),p[0]=_e(s+1/3,n,i),p[1]=_e(s,n,i),p[2]=_e(s-1/3,n,i);else p=t.match(W)||de.transparent;p=p.map(Number)}return e&&!f&&(n=p[0]/255,i=p[1]/255,a=p[2]/255,u=((h=Math.max(n,i,a))+(l=Math.min(n,i,a)))/2,h===l?s=o=0:(c=h-l,o=u>.5?c/(2-h-l):c/(h+l),s=h===n?(i-a)/c+(i<a?6:0):h===i?(a-n)/c+2:(n-i)/c+4,s*=60),p[0]=~~(s+.5),p[1]=~~(100*o+.5),p[2]=~~(100*u+.5)),r&&p.length<4&&(p[3]=1),p},ge=function(t){var e=[],r=[],n=-1;return t.split(ye).forEach((function(t){var i=t.match(Z)||[];e.push.apply(e,i),r.push(n+=i.length+1)})),e.c=r,e},ve=function(t,e,r){var n,i,a,s,o="",u=(t+o).match(ye),h=e?"hsla(":"rgba(",l=0;if(!u)return t;if(u=u.map((function(t){return(t=me(t,e,1))&&h+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),r&&(a=ge(t),(n=r.c).join(o)!==a.c.join(o)))for(s=(i=t.replace(ye,"1").split(Z)).length-1;l<s;l++)o+=i[l]+(~n.indexOf(l)?u.shift()||h+"0,0,0,0)":(a.length?a:u.length?u:r).shift());if(!i)for(s=(i=t.split(ye)).length-1;l<s;l++)o+=i[l]+u[l];return o+i[s]},ye=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(t in de)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),be=/hsl[a]?\(/,xe=function(t){var e,r=t.join(" ");if(ye.lastIndex=0,ye.test(r))return e=be.test(r),t[1]=ve(t[1],e),t[0]=ve(t[0],e,ge(t[1])),!0},we=(g=Date.now,v=500,y=33,b=g(),x=b,T=w=1/240,M=function t(e){var r,n,i=g()-x,a=!0===e;i>v&&(b+=i-y),x+=i,m.time=(x-b)/1e3,((r=m.time-T)>0||a)&&(m.frame++,T+=r+(r>=w?.004:w-r),n=1),a||(p=d(t)),n&&k.forEach((function(t){return t(m.time,i,m.frame,e)}))},m={time:0,frame:0,tick:function(){M(!0)},wake:function(){h&&(!o&&V()&&(s=o=window,u=s.document||{},et.gsap=lr,(s.gsapVersions||(s.gsapVersions=[])).push(lr.version),nt(rt||s.GreenSockGlobals||!s.gsap&&s||{}),_=s.requestAnimationFrame),p&&m.sleep(),d=_||function(t){return setTimeout(t,1e3*(T-m.time)+1|0)},f=1,M(2))},sleep:function(){(_?s.cancelAnimationFrame:clearTimeout)(p),f=0,d=ot},lagSmoothing:function(t,e){v=t||1/1e-8,y=Math.min(e,v,0)},fps:function(t){w=1/(t||240),T=m.time+w},add:function(t){k.indexOf(t)<0&&k.push(t),Te()},remove:function(t){var e;~(e=k.indexOf(t))&&k.splice(e,1)},_listeners:k=[]}),Te=function(){return!f&&we.wake()},ke={},Me=/^[\d.\-M][\d.\-,\s]/,Ce=/["']/g,Oe=function(t){for(var e,r,n,i={},a=t.substr(1,t.length-3).split(":"),s=a[0],o=1,u=a.length;o<u;o++)r=a[o],e=o!==u-1?r.lastIndexOf(","):r.length,n=r.substr(0,e),i[s]=isNaN(n)?n.replace(Ce,"").trim():+n,s=r.substr(e+1).trim();return i},Ae=function(t){return function(e){return 1-t(1-e)}},Se=function t(e,r){for(var n,i=e._first;i;)i instanceof Le?t(i,r):!i.vars.yoyoEase||i._yoyo&&i._repeat||i._yoyo===r||(i.timeline?t(i.timeline,r):(n=i._ease,i._ease=i._yEase,i._yEase=n,i._yoyo=r)),i=i._next},De=function(t,e){return t&&(U(t)?t:ke[t]||function(t){var e=(t+"").split("("),r=ke[e[0]];return r&&e.length>1&&r.config?r.config.apply(null,~t.indexOf("{")?[Oe(e[1])]:$.exec(t)[1].split(",").map(Mt)):ke._CE&&Me.test(t)?ke._CE("",t):r}(t))||e},Pe=function(t,e,r,n){void 0===r&&(r=function(t){return 1-e(1-t)}),void 0===n&&(n=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var i,a={easeIn:e,easeOut:r,easeInOut:n};return yt(t,(function(t){for(var e in ke[t]=et[t]=a,ke[i=t.toLowerCase()]=r,a)ke[i+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=ke[t+"."+e]=a[e]})),a},Ee=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},Re=function t(e,r,n){var i=r>=1?r:1,a=(n||(e?.3:.45))/(r<1?r:1),s=a/R*(Math.asin(1/i)||0),o=function(t){return 1===t?1:i*Math.pow(2,-10*t)*I((t-s)*a)+1},u="out"===e?o:"in"===e?function(t){return 1-o(1-t)}:Ee(o);return a=R/a,u.config=function(r,n){return t(e,r,n)},u},ze=function t(e,r){void 0===r&&(r=1.70158);var n=function(t){return t?--t*t*((r+1)*t+r)+1:0},i="out"===e?n:"in"===e?function(t){return 1-n(1-t)}:Ee(n);return i.config=function(r){return t(e,r)},i};yt("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var r=e<5?e+1:e;Pe(t+",Power"+(r-1),e?function(t){return Math.pow(t,r)}:function(t){return t},(function(t){return 1-Math.pow(1-t,r)}),(function(t){return t<.5?Math.pow(2*t,r)/2:1-Math.pow(2*(1-t),r)/2}))})),ke.Linear.easeNone=ke.none=ke.Linear.easeIn,Pe("Elastic",Re("in"),Re("out"),Re()),C=7.5625,A=1/(O=2.75),Pe("Bounce",(function(t){return 1-S(1-t)}),S=function(t){return t<A?C*t*t:t<.7272727272727273?C*Math.pow(t-1.5/O,2)+.75:t<.9090909090909092?C*(t-=2.25/O)*t+.9375:C*Math.pow(t-2.625/O,2)+.984375}),Pe("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),Pe("Circ",(function(t){return-(F(1-t*t)-1)})),Pe("Sine",(function(t){return 1===t?1:1-L(t*z)})),Pe("Back",ze("in"),ze("out"),ze()),ke.SteppedEase=ke.steps=et.SteppedEase={config:function(t,e){void 0===t&&(t=1);var r=1/t,n=t+(e?0:1),i=e?1:0;return function(t){return((n*Zt(0,1-1e-8,t)|0)+i)*r}}},P.ease=ke["quad.out"],yt("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return _t+=t+","+t+"Params,"}));var Be=function(t,e){this.id=B++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:vt,this.set=e?e.getSetter:Je},Fe=function(){function t(t,e){var r=t.parent||a;this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,Vt(this,+t.duration,1),this.data=t.data,f||we.wake(),r&&jt(r,this,e||0===e?e:r._time,1),t.reversed&&this.reverse(),t.paused&&this.paused(!0)}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,Vt(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(Te(),!arguments.length)return this._tTime;var r=this.parent||this._dp;if(r&&r.smoothChildTiming&&this._ts){for(this._start=bt(r._time-(this._ts>0?t/this._ts:((this._dirty?this.totalDuration():this._tDur)-t)/-this._ts)),Ut(this),r._dirty||Bt(r);r.parent;)r.parent._time!==r._start+(r._ts>=0?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&jt(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&1e-8===Math.abs(this._zTime)||!t&&!this._initted)&&(this._ts||(this._pTime=t),kt(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+Lt(this))%this._dur||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+Lt(this),e):this.duration()?Math.min(1,this._time/this._dur):this.ratio},e.iteration=function(t,e){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*r,e):this._repeat?It(this._tTime,r)+1:1},e.timeScale=function(t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var e=this.parent&&this._ts?Nt(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,Ft(this.totalTime(Zt(0,this._tDur,e),!0))},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Te(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&(this._tTime-=1e-8)&&1e-8!==Math.abs(this._zTime)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&jt(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(Y(t)?this.totalDuration():this.duration())/Math.abs(this._ts)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Nt(e.rawTime(t),this):this._tTime:this._tTime},e.repeat=function(t){return arguments.length?(this._repeat=t,Gt(this)):this._repeat},e.repeatDelay=function(t){return arguments.length?(this._rDelay=t,Gt(this)):this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(Wt(this,t),Y(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,Y(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=0,this._zTime=-1e-8,this},e.isActive=function(t){var e,r=this.parent||this._dp,n=this._start;return!(r&&!(this._ts&&(this._initted||!t)&&r.isActive(t)&&(e=r.rawTime(!0))>=n&&e<this.endTime(!0)-1e-8))},e.eventCallback=function(t,e,r){var n=this.vars;return arguments.length>1?(e?(n[t]=e,r&&(n[t+"Params"]=r),"onUpdate"===t&&(this._onUpdate=e)):delete n[t],this):n[t]},e.then=function(t){var e=this;return new Promise((function(r){var n=U(t)?t:Ct,i=function(){var t=e.then;e.then=null,U(n)&&(n=n(e))&&(n.then||n===e)&&(e.then=t),r(n),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?i():e._prom=i}))},e.kill=function(){fe(this)},t}();Ot(Fe.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Le=function(t){function e(e,r){var i;return void 0===e&&(e={}),(i=t.call(this,e,r)||this).labels={},i.smoothChildTiming=!!e.smoothChildTiming,i.autoRemoveChildren=!!e.autoRemoveChildren,i._sort=Y(e.sortChildren),i.parent&&Xt(i.parent,n(i)),e.scrollTrigger&&qt(n(i),e.scrollTrigger),i}i(e,t);var r=e.prototype;return r.to=function(t,e,r){return new Ge(t,wt(arguments,0,this),Wt(this,X(e)?arguments[3]:r)),this},r.from=function(t,e,r){return new Ge(t,wt(arguments,1,this),Wt(this,X(e)?arguments[3]:r)),this},r.fromTo=function(t,e,r,n){return new Ge(t,wt(arguments,2,this),Wt(this,X(e)?arguments[4]:n)),this},r.set=function(t,e,r){return e.duration=0,e.parent=this,Et(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new Ge(t,e,Wt(this,r),1),this},r.call=function(t,e,r){return jt(this,Ge.delayedCall(0,t,e),Wt(this,r))},r.staggerTo=function(t,e,r,n,i,a,s){return r.duration=e,r.stagger=r.stagger||n,r.onComplete=a,r.onCompleteParams=s,r.parent=this,new Ge(t,r,Wt(this,i)),this},r.staggerFrom=function(t,e,r,n,i,a,s){return r.runBackwards=1,Et(r).immediateRender=Y(r.immediateRender),this.staggerTo(t,e,r,n,i,a,s)},r.staggerFromTo=function(t,e,r,n,i,a,s,o){return n.startAt=r,Et(n).immediateRender=Y(n.immediateRender),this.staggerTo(t,e,n,i,a,s,o)},r.render=function(t,e,r){var n,i,s,o,u,h,l,c,f,p,d,_,m=this._time,g=this._dirty?this.totalDuration():this._tDur,v=this._dur,y=this!==a&&t>g-1e-8&&t>=0?g:t<1e-8?0:t,b=this._zTime<0!=t<0&&(this._initted||!v);if(y!==this._tTime||r||b){if(m!==this._time&&v&&(y+=this._time-m,t+=this._time-m),n=y,f=this._start,h=!(c=this._ts),b&&(v||(m=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat&&(d=this._yoyo,u=v+this._rDelay,((n=bt(y%u))>v||g===y)&&(n=v),(o=~~(y/u))&&o===y/u&&(n=v,o--),p=It(this._tTime,u),!m&&this._tTime&&p!==o&&(p=o),d&&1&o&&(n=v-n,_=1),o!==p&&!this._lock)){var x=d&&1&p,w=x===(d&&1&o);if(o<p&&(x=!x),m=x?0:v,this._lock=1,this.render(m||(_?0:bt(o*u)),e,!v)._lock=0,!e&&this.parent&&ce(this,"onRepeat"),this.vars.repeatRefresh&&!_&&(this.invalidate()._lock=1),m!==this._time||h!==!this._ts)return this;if(w&&(this._lock=2,m=x?v+1e-4:-1e-4,this.render(m,!0),this.vars.repeatRefresh&&!_&&this.invalidate()),this._lock=0,!this._ts&&!h)return this;Se(this,_)}if(this._hasPause&&!this._forcing&&this._lock<2&&(l=function(t,e,r){var n;if(r>e)for(n=t._first;n&&n._start<=r;){if(!n._dur&&"isPause"===n.data&&n._start>e)return n;n=n._next}else for(n=t._last;n&&n._start>=r;){if(!n._dur&&"isPause"===n.data&&n._start<e)return n;n=n._prev}}(this,bt(m),bt(n)))&&(y-=n-(n=l._start)),this._tTime=y,this._time=n,this._act=!c,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t),m||!n||e||ce(this,"onStart"),n>=m&&t>=0)for(i=this._first;i;){if(s=i._next,(i._act||n>=i._start)&&i._ts&&l!==i){if(i.parent!==this)return this.render(t,e,r);if(i.render(i._ts>0?(n-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(n-i._start)*i._ts,e,r),n!==this._time||!this._ts&&!h){l=0,s&&(y+=this._zTime=-1e-8);break}}i=s}else{i=this._last;for(var T=t<0?t:n;i;){if(s=i._prev,(i._act||T<=i._end)&&i._ts&&l!==i){if(i.parent!==this)return this.render(t,e,r);if(i.render(i._ts>0?(T-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(T-i._start)*i._ts,e,r),n!==this._time||!this._ts&&!h){l=0,s&&(y+=this._zTime=T?-1e-8:1e-8);break}}i=s}}if(l&&!e&&(this.pause(),l.render(n>=m?0:-1e-8)._zTime=n>=m?1:-1,this._ts))return this._start=f,Ut(this),this.render(t,e,r);this._onUpdate&&!e&&ce(this,"onUpdate",!0),(y===g&&g>=this.totalDuration()||!y&&m)&&(f!==this._start&&Math.abs(c)===Math.abs(this._ts)||this._lock||((t||!v)&&(y===g&&this._ts>0||!y&&this._ts<0)&&zt(this,1),e||t<0&&!m||!y&&!m||(ce(this,y===g?"onComplete":"onReverseComplete",!0),this._prom&&!(y<g&&this.timeScale()>0)&&this._prom())))}return this},r.add=function(t,e){var r=this;if(X(e)||(e=Wt(this,e)),!(t instanceof Fe)){if(H(t))return t.forEach((function(t){return r.add(t,e)})),Bt(this);if(N(t))return this.addLabel(t,e);if(!U(t))return this;t=Ge.delayedCall(0,t)}return this!==t?jt(this,t,e):this},r.getChildren=function(t,e,r,n){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===r&&(r=!0),void 0===n&&(n=-E);for(var i=[],a=this._first;a;)a._start>=n&&(a instanceof Ge?e&&i.push(a):(r&&i.push(a),t&&i.push.apply(i,a.getChildren(!0,e,r)))),a=a._next;return i},r.getById=function(t){for(var e=this.getChildren(1,1,1),r=e.length;r--;)if(e[r].vars.id===t)return e[r]},r.remove=function(t){return N(t)?this.removeLabel(t):U(t)?this.killTweensOf(t):(Rt(this,t),t===this._recent&&(this._recent=this._last),Bt(this))},r.totalTime=function(e,r){return arguments.length?(this._forcing=1,this.parent||this._dp||!this._ts||(this._start=bt(we.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,r),this._forcing=0,this):this._tTime},r.addLabel=function(t,e){return this.labels[t]=Wt(this,e),this},r.removeLabel=function(t){return delete this.labels[t],this},r.addPause=function(t,e,r){var n=Ge.delayedCall(0,e||ot,r);return n.data="isPause",this._hasPause=1,jt(this,n,Wt(this,t))},r.removePause=function(t){var e=this._first;for(t=Wt(this,t);e;)e._start===t&&"isPause"===e.data&&zt(e),e=e._next},r.killTweensOf=function(t,e,r){for(var n=this.getTweensOf(t,r),i=n.length;i--;)Ie!==n[i]&&n[i].kill(t,e);return this},r.getTweensOf=function(t,e){for(var r,n=[],i=ee(t),a=this._first;a;)a instanceof Ge?!xt(a._targets,i)||e&&!a.isActive("started"===e)||n.push(a):(r=a.getTweensOf(i,e)).length&&n.push.apply(n,r),a=a._next;return n},r.tweenTo=function(t,e){e=e||{};var r=this,n=Wt(r,t),i=e,a=i.startAt,s=i.onStart,o=i.onStartParams,u=Ge.to(r,Ot(e,{ease:"none",lazy:!1,time:n,duration:e.duration||Math.abs((n-(a&&"time"in a?a.time:r._time))/r.timeScale())||1e-8,onStart:function(){r.pause();var t=e.duration||Math.abs((n-r._time)/r.timeScale());u._dur!==t&&Vt(u,t).render(u._time,!0,!0),s&&s.apply(u,o||[])}}));return u},r.tweenFromTo=function(t,e,r){return this.tweenTo(e,Ot({startAt:{time:Wt(this,t)}},r))},r.recent=function(){return this._recent},r.nextLabel=function(t){return void 0===t&&(t=this._time),le(this,Wt(this,t))},r.previousLabel=function(t){return void 0===t&&(t=this._time),le(this,Wt(this,t),1)},r.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+1e-8)},r.shiftChildren=function(t,e,r){void 0===r&&(r=0);for(var n,i=this._first,a=this.labels;i;)i._start>=r&&(i._start+=t),i=i._next;if(e)for(n in a)a[n]>=r&&(a[n]+=t);return Bt(this)},r.invalidate=function(){var e=this._first;for(this._lock=0;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},r.clear=function(t){void 0===t&&(t=!0);for(var e,r=this._first;r;)e=r._next,this.remove(r),r=e;return this._time=this._tTime=this._pTime=0,t&&(this.labels={}),Bt(this)},r.totalDuration=function(t){var e,r,n,i,s=0,o=this,u=o._last,h=E;if(arguments.length)return o.timeScale((o._repeat<0?o.duration():o.totalDuration())/(o.reversed()?-t:t));if(o._dirty){for(i=o.parent;u;)e=u._prev,u._dirty&&u.totalDuration(),(n=u._start)>h&&o._sort&&u._ts&&!o._lock?(o._lock=1,jt(o,u,n-u._delay,1)._lock=0):h=n,n<0&&u._ts&&(s-=n,(!i&&!o._dp||i&&i.smoothChildTiming)&&(o._start+=n/o._ts,o._time-=n,o._tTime-=n),o.shiftChildren(-n,!1,-Infinity),h=0),(r=Ut(u))>s&&u._ts&&(s=r),u=e;Vt(o,o===a&&o._time>s?o._time:s,1),o._dirty=0}return o._tDur},e.updateRoot=function(t){if(a._ts&&(kt(a,Nt(t,a)),l=we.frame),we.frame>=pt){pt+=D.autoSleep||120;var e=a._first;if((!e||!e._ts)&&D.autoSleep&&we._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||we.sleep()}}},e}(Fe);Ot(Le.prototype,{_lock:0,_hasPause:0,_forcing:0});var Ie,Ne=function(t,e,r,n,i,a,s){var o,u,h,l,c,f,p,d,_=new sr(this._pt,t,e,0,1,tr,null,i),m=0,g=0;for(_.b=r,_.e=n,r+="",(p=~(n+="").indexOf("random("))&&(n=ue(n)),a&&(a(d=[r,n],t,e),r=d[0],n=d[1]),u=r.match(J)||[];o=J.exec(n);)l=o[0],c=n.substring(m,o.index),h?h=(h+1)%5:"rgba("===c.substr(-5)&&(h=1),l!==u[g++]&&(f=parseFloat(u[g-1])||0,_._pt={_next:_._pt,p:c||1===g?c:",",s:f,c:"="===l.charAt(1)?parseFloat(l.substr(2))*("-"===l.charAt(0)?-1:1):parseFloat(l)-f,m:h&&h<4?Math.round:0},m=J.lastIndex);return _.c=m<n.length?n.substring(m,n.length):"",_.fp=s,(K.test(n)||p)&&(_.e=0),this._pt=_,_},Ue=function(t,e,r,n,i,a,s,o,u){U(n)&&(n=n(i||0,t,a));var h,l=t[e],c="get"!==r?r:U(l)?u?t[e.indexOf("set")||!U(t["get"+e.substr(3)])?e:"get"+e.substr(3)](u):t[e]():l,f=U(l)?u?Qe:We:He;if(N(n)&&(~n.indexOf("random(")&&(n=ue(n)),"="===n.charAt(1)&&(n=parseFloat(c)+parseFloat(n.substr(2))*("-"===n.charAt(0)?-1:1)+(Jt(c)||0))),c!==n)return isNaN(c+n)?(!l&&!(e in t)&&it(e,n),Ne.call(this,t,e,c,n,f,o||D.stringFilter,u)):(h=new sr(this._pt,t,e,+c||0,n-(c||0),"boolean"==typeof l?Ke:$e,0,f),u&&(h.fp=u),s&&h.modifier(s,this,t),this._pt=h)},Xe=function(t,e,r,n,i,a){var s,o,u,h;if(ct[t]&&!1!==(s=new ct[t]).init(i,s.rawVars?e[t]:function(t,e,r,n,i){if(U(t)&&(t=qe(t,i,e,r,n)),!q(t)||t.style&&t.nodeType||H(t))return N(t)?qe(t,i,e,r,n):t;var a,s={};for(a in t)s[a]=qe(t[a],i,e,r,n);return s}(e[t],n,i,a,r),r,n,a)&&(r._pt=o=new sr(r._pt,i,t,0,1,s.render,s,0,s.priority),r!==c))for(u=r._ptLookup[r._targets.indexOf(i)],h=s._props.length;h--;)u[s._props[h]]=o;return s},je=function t(e,r){var n,i,s,o,u,h,l,c,f,p,d,_,m=e.vars,g=m.ease,v=m.startAt,y=m.immediateRender,b=m.lazy,x=m.onUpdate,w=m.onUpdateParams,T=m.callbackScope,k=m.runBackwards,M=m.yoyoEase,C=m.keyframes,O=m.autoRevert,A=e._dur,S=e._startAt,D=e._targets,E=e.parent,R=E&&"nested"===E.data?E.parent._targets:D,z="auto"===e._overwrite,B=e.timeline;if(B&&(!C||!g)&&(g="none"),e._ease=De(g,P.ease),e._yEase=M?Ae(De(!0===M?g:M,P.ease)):0,M&&e._yoyo&&!e._repeat&&(M=e._yEase,e._yEase=e._ease,e._ease=M),!B){if(_=(c=D[0]?gt(D[0]).harness:0)&&m[c.prop],n=Pt(m,ut),S&&S.render(-1,!0).kill(),v){if(zt(e._startAt=Ge.set(D,Ot({data:"isStart",overwrite:!1,parent:E,immediateRender:!0,lazy:Y(b),startAt:null,delay:0,onUpdate:x,onUpdateParams:w,callbackScope:T,stagger:0},v))),y)if(r>0)!O&&(e._startAt=0);else if(A)return}else if(k&&A)if(S)!O&&(e._startAt=0);else if(r&&(y=!1),s=St(n,{overwrite:!1,data:"isFromStart",lazy:y&&Y(b),immediateRender:y,stagger:0,parent:E}),_&&(s[c.prop]=_),zt(e._startAt=Ge.set(D,s)),y){if(!r)return}else t(e._startAt,1e-8);for(e._pt=0,b=A&&Y(b)||b&&!A,i=0;i<D.length;i++){if(l=(u=D[i])._gsap||mt(D)[i]._gsap,e._ptLookup[i]=p={},lt[l.id]&&Tt(),d=R===D?i:R.indexOf(u),c&&!1!==(f=new c).init(u,_||n,e,d,R)&&(e._pt=o=new sr(e._pt,u,f.name,0,1,f.render,f,0,f.priority),f._props.forEach((function(t){p[t]=o})),f.priority&&(h=1)),!c||_)for(s in n)ct[s]&&(f=Xe(s,n,e,d,u,R))?f.priority&&(h=1):p[s]=o=Ue.call(e,u,s,"get",n[s],d,R,0,m.stringFilter);e._op&&e._op[i]&&e.kill(u,e._op[i]),z&&e._pt&&(Ie=e,a.killTweensOf(u,p,"started"),Ie=0),e._pt&&b&&(lt[l.id]=1)}h&&ar(e),e._onInit&&e._onInit(e)}e._from=!B&&!!m.runBackwards,e._onUpdate=x,e._initted=!!e.parent},qe=function(t,e,r,n,i){return U(t)?t.call(e,r,n,i):N(t)&&~t.indexOf("random(")?ue(t):t},Ye=_t+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",Ve=(Ye+",id,stagger,delay,duration,paused,scrollTrigger").split(","),Ge=function(t){function e(e,r,i,s){var o;"number"==typeof r&&(i.duration=r,r=i,i=null);var u,h,l,c,f,p,d,_,m=(o=t.call(this,s?r:Et(r),i)||this).vars,g=m.duration,v=m.delay,y=m.immediateRender,b=m.stagger,x=m.overwrite,w=m.keyframes,T=m.defaults,k=m.scrollTrigger,M=m.yoyoEase,C=o.parent,O=(H(e)?X(e[0]):"length"in r)?[e]:ee(e);if(o._targets=O.length?mt(O):at("GSAP target "+e+" not found. https://greensock.com",!D.nullTargetWarn)||[],o._ptLookup=[],o._overwrite=x,w||b||G(g)||G(v)){if(r=o.vars,(u=o.timeline=new Le({data:"nested",defaults:T||{}})).kill(),u.parent=n(o),w)Ot(u.vars.defaults,{ease:"none"}),w.forEach((function(t){return u.to(O,t,">")}));else{if(c=O.length,d=b?ne(b):ot,q(b))for(f in b)~Ye.indexOf(f)&&(_||(_={}),_[f]=b[f]);for(h=0;h<c;h++){for(f in l={},r)Ve.indexOf(f)<0&&(l[f]=r[f]);l.stagger=0,M&&(l.yoyoEase=M),_&&St(l,_),p=O[h],l.duration=+qe(g,n(o),h,p,O),l.delay=(+qe(v,n(o),h,p,O)||0)-o._delay,!b&&1===c&&l.delay&&(o._delay=v=l.delay,o._start+=v,l.delay=0),u.to(p,l,d(h,p,O))}u.duration()?g=v=0:o.timeline=0}g||o.duration(g=u.duration())}else o.timeline=0;return!0===x&&(Ie=n(o),a.killTweensOf(O),Ie=0),C&&Xt(C,n(o)),(y||!g&&!w&&o._start===bt(C._time)&&Y(y)&&function t(e){return!e||e._ts&&t(e.parent)}(n(o))&&"nested"!==C.data)&&(o._tTime=-1e-8,o.render(Math.max(0,-v))),k&&qt(n(o),k),o}i(e,t);var r=e.prototype;return r.render=function(t,e,r){var n,i,a,s,o,u,h,l,c,f=this._time,p=this._tDur,d=this._dur,_=t>p-1e-8&&t>=0?p:t<1e-8?0:t;if(d){if(_!==this._tTime||!t||r||this._startAt&&this._zTime<0!=t<0){if(n=_,l=this.timeline,this._repeat){if(s=d+this._rDelay,((n=bt(_%s))>d||p===_)&&(n=d),(a=~~(_/s))&&a===_/s&&(n=d,a--),(u=this._yoyo&&1&a)&&(c=this._yEase,n=d-n),o=It(this._tTime,s),n===f&&!r&&this._initted)return this;a!==o&&(l&&this._yEase&&Se(l,u),!this.vars.repeatRefresh||u||this._lock||(this._lock=r=1,this.render(bt(s*a),!0).invalidate()._lock=0))}if(!this._initted){if(Yt(this,n,r,e))return this._tTime=0,this;if(d!==this._dur)return this.render(t,e,r)}for(this._tTime=_,this._time=n,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=h=(c||this._ease)(n/d),this._from&&(this.ratio=h=1-h),n&&!f&&!e&&ce(this,"onStart"),i=this._pt;i;)i.r(h,i.d),i=i._next;l&&l.render(t<0?t:!n&&u?-1e-8:l._dur*h,e,r)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(t<0&&this._startAt&&this._startAt.render(t,!0,r),ce(this,"onUpdate")),this._repeat&&a!==o&&this.vars.onRepeat&&!e&&this.parent&&ce(this,"onRepeat"),_!==this._tDur&&_||this._tTime!==_||(t<0&&this._startAt&&!this._onUpdate&&this._startAt.render(t,!0,!0),(t||!d)&&(_===this._tDur&&this._ts>0||!_&&this._ts<0)&&zt(this,1),e||t<0&&!f||!_&&!f||(ce(this,_===p?"onComplete":"onReverseComplete",!0),this._prom&&!(_<p&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,r,n){var i,a,s=t.ratio,o=e<0||!e&&s&&!t._start&&t._zTime>1e-8&&!t._dp._lock||t._ts<0||t._dp._ts<0?0:1,u=t._rDelay,h=0;if(u&&t._repeat&&(h=Zt(0,t._tDur,e),It(h,u)!==(a=It(t._tTime,u))&&(s=1-o,t.vars.repeatRefresh&&t._initted&&t.invalidate())),t._initted||!Yt(t,e,n,r))if(o!==s||n||1e-8===t._zTime||!e&&t._zTime){for(a=t._zTime,t._zTime=e||(r?1e-8:0),r||(r=e&&!a),t.ratio=o,t._from&&(o=1-o),t._time=0,t._tTime=h,r||ce(t,"onStart"),i=t._pt;i;)i.r(o,i.d),i=i._next;t._startAt&&e<0&&t._startAt.render(e,!0,!0),t._onUpdate&&!r&&ce(t,"onUpdate"),h&&t._repeat&&!r&&t.parent&&ce(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===o&&(o&&zt(t,1),r||(ce(t,o?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,r);return this},r.targets=function(){return this._targets},r.invalidate=function(){return this._pt=this._op=this._startAt=this._onUpdate=this._act=this._lazy=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(),t.prototype.invalidate.call(this)},r.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e)&&(this._lazy=0,this.parent))return fe(this);if(this.timeline){var r=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,Ie&&!0!==Ie.vars.overwrite)._first||fe(this),this.parent&&r!==this.timeline.totalDuration()&&Vt(this,this._dur*this.timeline._tDur/r),this}var n,i,a,s,o,u,h,l=this._targets,c=t?ee(t):l,f=this._ptLookup,p=this._pt;if((!e||"all"===e)&&function(t,e){for(var r=t.length,n=r===e.length;n&&r--&&t[r]===e[r];);return r<0}(l,c))return fe(this);for(n=this._op=this._op||[],"all"!==e&&(N(e)&&(o={},yt(e,(function(t){return o[t]=1})),e=o),e=function(t,e){var r,n,i,a,s=t[0]?gt(t[0]).harness:0,o=s&&s.aliases;if(!o)return e;for(n in r=St({},e),o)if(n in r)for(i=(a=o[n].split(",")).length;i--;)r[a[i]]=r[n];return r}(l,e)),h=l.length;h--;)if(~c.indexOf(l[h]))for(o in i=f[h],"all"===e?(n[h]=e,s=i,a={}):(a=n[h]=n[h]||{},s=e),s)(u=i&&i[o])&&("kill"in u.d&&!0!==u.d.kill(o)||Rt(this,u,"_pt"),delete i[o]),"all"!==a&&(a[o]=1);return this._initted&&!this._pt&&p&&fe(this),this},e.to=function(t,r){return new e(t,r,arguments[2])},e.from=function(t,r){return new e(t,wt(arguments,1))},e.delayedCall=function(t,r,n,i){return new e(r,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:r,onReverseComplete:r,onCompleteParams:n,onReverseCompleteParams:n,callbackScope:i})},e.fromTo=function(t,r,n){return new e(t,wt(arguments,2))},e.set=function(t,r){return r.duration=0,r.repeatDelay||(r.repeat=0),new e(t,r)},e.killTweensOf=function(t,e,r){return a.killTweensOf(t,e,r)},e}(Fe);Ot(Ge.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),yt("staggerTo,staggerFrom,staggerFromTo",(function(t){Ge[t]=function(){var e=new Le,r=$t.call(arguments,0);return r.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,r)}}));var He=function(t,e,r){return t[e]=r},We=function(t,e,r){return t[e](r)},Qe=function(t,e,r,n){return t[e](n.fp,r)},Ze=function(t,e,r){return t.setAttribute(e,r)},Je=function(t,e){return U(t[e])?We:j(t[e])&&t.setAttribute?Ze:He},$e=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4,e)},Ke=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},tr=function(t,e){var r=e._pt,n="";if(!t&&e.b)n=e.b;else if(1===t&&e.e)n=e.e;else{for(;r;)n=r.p+(r.m?r.m(r.s+r.c*t):Math.round(1e4*(r.s+r.c*t))/1e4)+n,r=r._next;n+=e.c}e.set(e.t,e.p,n,e)},er=function(t,e){for(var r=e._pt;r;)r.r(t,r.d),r=r._next},rr=function(t,e,r,n){for(var i,a=this._pt;a;)i=a._next,a.p===n&&a.modifier(t,e,r),a=i},nr=function(t){for(var e,r,n=this._pt;n;)r=n._next,n.p===t&&!n.op||n.op===t?Rt(this,n,"_pt"):n.dep||(e=1),n=r;return!e},ir=function(t,e,r,n){n.mSet(t,e,n.m.call(n.tween,r,n.mt),n)},ar=function(t){for(var e,r,n,i,a=t._pt;a;){for(e=a._next,r=n;r&&r.pr>a.pr;)r=r._next;(a._prev=r?r._prev:i)?a._prev._next=a:n=a,(a._next=r)?r._prev=a:i=a,a=e}t._pt=n},sr=function(){function t(t,e,r,n,i,a,s,o,u){this.t=e,this.s=n,this.c=i,this.p=r,this.r=a||$e,this.d=s||this,this.set=o||He,this.pr=u||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,r){this.mSet=this.mSet||this.set,this.set=ir,this.m=t,this.mt=r,this.tween=e},t}();yt(_t+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return ut[t]=1})),et.TweenMax=et.TweenLite=Ge,et.TimelineLite=et.TimelineMax=Le,a=new Le({sortChildren:!1,defaults:P,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),D.stringFilter=xe;var or={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];e.forEach((function(t){return pe(t)}))},timeline:function(t){return new Le(t)},getTweensOf:function(t,e){return a.getTweensOf(t,e)},getProperty:function(t,e,r,n){N(t)&&(t=ee(t)[0]);var i=gt(t||{}).get,a=r?Ct:Mt;return"native"===r&&(r=""),t?e?a((ct[e]&&ct[e].get||i)(t,e,r,n)):function(e,r,n){return a((ct[e]&&ct[e].get||i)(t,e,r,n))}:t},quickSetter:function(t,e,r){if((t=ee(t)).length>1){var n=t.map((function(t){return lr.quickSetter(t,e,r)})),i=n.length;return function(t){for(var e=i;e--;)n[e](t)}}t=t[0]||{};var a=ct[e],s=gt(t),o=s.harness&&(s.harness.aliases||{})[e]||e,u=a?function(e){var n=new a;c._pt=0,n.init(t,r?e+r:e,c,0,[t]),n.render(1,n),c._pt&&er(1,c)}:s.set(t,o);return a?u:function(e){return u(t,o,r?e+r:e,s,1)}},isTweening:function(t){return a.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=De(t.ease,P.ease)),Dt(P,t||{})},config:function(t){return Dt(D,t||{})},registerEffect:function(t){var e=t.name,r=t.effect,n=t.plugins,i=t.defaults,a=t.extendTimeline;(n||"").split(",").forEach((function(t){return t&&!ct[t]&&!et[t]&&at(e+" effect requires "+t+" plugin.")})),ft[e]=function(t,e,n){return r(ee(t),Ot(e||{},i),n)},a&&(Le.prototype[e]=function(t,r,n){return this.add(ft[e](t,q(r)?r:(n=r)&&{},this),n)})},registerEase:function(t,e){ke[t]=De(e)},parseEase:function(t,e){return arguments.length?De(t,e):ke},getById:function(t){return a.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var r,n,i=new Le(t);for(i.smoothChildTiming=Y(t.smoothChildTiming),a.remove(i),i._dp=0,i._time=i._tTime=a._time,r=a._first;r;)n=r._next,!e&&!r._dur&&r instanceof Ge&&r.vars.onComplete===r._targets[0]||jt(i,r,r._start-r._delay),r=n;return jt(a,i,0),i},utils:{wrap:function t(e,r,n){var i=r-e;return H(e)?oe(e,t(0,e.length),r):Qt(n,(function(t){return(i+(t-e)%i)%i+e}))},wrapYoyo:function t(e,r,n){var i=r-e,a=2*i;return H(e)?oe(e,t(0,e.length-1),r):Qt(n,(function(t){return e+((t=(a+(t-e)%a)%a||0)>i?a-t:t)}))},distribute:ne,random:se,snap:ae,normalize:function(t,e,r){return he(t,e,0,1,r)},getUnit:Jt,clamp:function(t,e,r){return Qt(r,(function(r){return Zt(t,e,r)}))},splitColor:me,toArray:ee,mapRange:he,pipe:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},unitize:function(t,e){return function(r){return t(parseFloat(r))+(e||Jt(r))}},interpolate:function t(e,r,n,i){var a=isNaN(e+r)?0:function(t){return(1-t)*e+t*r};if(!a){var s,o,u,h,l,c=N(e),f={};if(!0===n&&(i=1)&&(n=null),c)e={p:e},r={p:r};else if(H(e)&&!H(r)){for(u=[],h=e.length,l=h-2,o=1;o<h;o++)u.push(t(e[o-1],e[o]));h--,a=function(t){t*=h;var e=Math.min(l,~~t);return u[e](t-e)},n=r}else i||(e=St(H(e)?[]:{},e));if(!u){for(s in r)Ue.call(f,e,s,"get",r[s]);a=function(t){return er(t,f)||(c?e.p:e)}}}return Qt(n,a)},shuffle:re},install:nt,effects:ft,ticker:we,updateRoot:Le.updateRoot,plugins:ct,globalTimeline:a,core:{PropTween:sr,globals:st,Tween:Ge,Timeline:Le,Animation:Fe,getCache:gt,_removeLinkedListItem:Rt}};yt("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return or[t]=Ge[t]})),we.add(Le.updateRoot),c=or.to({},{duration:0});var ur=function(t,e){for(var r=t._pt;r&&r.p!==e&&r.op!==e&&r.fp!==e;)r=r._next;return r},hr=function(t,e){return{name:t,rawVars:1,init:function(t,r,n){n._onInit=function(t){var n,i;if(N(r)&&(n={},yt(r,(function(t){return n[t]=1})),r=n),e){for(i in n={},r)n[i]=e(r[i]);r=n}!function(t,e){var r,n,i,a=t._targets;for(r in e)for(n=a.length;n--;)(i=t._ptLookup[n][r])&&(i=i.d)&&(i._pt&&(i=ur(i,r)),i&&i.modifier&&i.modifier(e[r],t,a[n],r))}(t,r)}}}},lr=or.registerPlugin({name:"attr",init:function(t,e,r,n,i){var a,s;for(a in e)(s=this.add(t,"setAttribute",(t.getAttribute(a)||0)+"",e[a],n,i,0,0,a))&&(s.op=a),this._props.push(a)}},{name:"endArray",init:function(t,e){for(var r=e.length;r--;)this.add(t,r,t[r]||0,e[r])}},hr("roundProps",ie),hr("modifiers"),hr("snap",ae))||or;Ge.version=Le.version=lr.version="3.3.2",h=1,V()&&Te();ke.Power0,ke.Power1,ke.Power2,ke.Power3,ke.Power4,ke.Linear,ke.Quad,ke.Cubic,ke.Quart,ke.Quint,ke.Strong,ke.Elastic,ke.Back,ke.SteppedEase,ke.Bounce,ke.Sine,ke.Expo,ke.Circ;
/*!
 * CSSPlugin 3.3.2
 * https://greensock.com
 *
 * Copyright 2008-2020, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/var cr,fr,pr,dr,_r,mr,gr,vr,yr={},br=180/Math.PI,xr=Math.PI/180,wr=Math.atan2,Tr=/([A-Z])/g,kr=/(?:left|right|width|margin|padding|x)/i,Mr=/[\s,\(]\S/,Cr={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},Or=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},Ar=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},Sr=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},Dr=function(t,e){var r=e.s+e.c*t;e.set(e.t,e.p,~~(r+(r<0?-.5:.5))+e.u,e)},Pr=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},Er=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},Rr=function(t,e,r){return t.style[e]=r},zr=function(t,e,r){return t.style.setProperty(e,r)},Br=function(t,e,r){return t._gsap[e]=r},Fr=function(t,e,r){return t._gsap.scaleX=t._gsap.scaleY=r},Lr=function(t,e,r,n,i){var a=t._gsap;a.scaleX=a.scaleY=r,a.renderTransform(i,a)},Ir=function(t,e,r,n,i){var a=t._gsap;a[e]=r,a.renderTransform(i,a)},Nr="transform",Ur=Nr+"Origin",Xr=function(t,e){var r=fr.createElementNS?fr.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):fr.createElement(t);return r.style?r:fr.createElement(t)},jr=function t(e,r,n){var i=getComputedStyle(e);return i[r]||i.getPropertyValue(r.replace(Tr,"-$1").toLowerCase())||i.getPropertyValue(r)||!n&&t(e,Yr(r)||r,1)||""},qr="O,Moz,ms,Ms,Webkit".split(","),Yr=function(t,e,r){var n=(e||_r).style,i=5;if(t in n&&!r)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);i--&&!(qr[i]+t in n););return i<0?null:(3===i?"ms":i>=0?qr[i]:"")+t},Vr=function(){"undefined"!=typeof window&&window.document&&(cr=window,fr=cr.document,pr=fr.documentElement,_r=Xr("div")||{style:{}},mr=Xr("div"),Nr=Yr(Nr),Ur=Yr(Ur),_r.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",vr=!!Yr("perspective"),dr=1)},Gr=function t(e){var r,n=Xr("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),i=this.parentNode,a=this.nextSibling,s=this.style.cssText;if(pr.appendChild(n),n.appendChild(this),this.style.display="block",e)try{r=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(r=this._gsapBBox());return i&&(a?i.insertBefore(this,a):i.appendChild(this)),pr.removeChild(n),this.style.cssText=s,r},Hr=function(t,e){for(var r=e.length;r--;)if(t.hasAttribute(e[r]))return t.getAttribute(e[r])},Wr=function(t){var e;try{e=t.getBBox()}catch(r){e=Gr.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===Gr||(e=Gr.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+Hr(t,["x","cx","x1"])||0,y:+Hr(t,["y","cy","y1"])||0,width:0,height:0}},Qr=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!Wr(t))},Zr=function(t,e){if(e){var r=t.style;e in yr&&(e=Nr),r.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),r.removeProperty(e.replace(Tr,"-$1").toLowerCase())):r.removeAttribute(e)}},Jr=function(t,e,r,n,i,a){var s=new sr(t._pt,e,r,0,1,a?Er:Pr);return t._pt=s,s.b=n,s.e=i,t._props.push(r),s},$r={deg:1,rad:1,turn:1},Kr=function t(e,r,n,i){var a,s,o,u,h=parseFloat(n)||0,l=(n+"").trim().substr((h+"").length)||"px",c=_r.style,f=kr.test(r),p="svg"===e.tagName.toLowerCase(),d=(p?"client":"offset")+(f?"Width":"Height"),_="px"===i,m="%"===i;return i===l||!h||$r[i]||$r[l]?h:("px"!==l&&!_&&(h=t(e,r,n,"px")),u=e.getCTM&&Qr(e),m&&(yr[r]||~r.indexOf("adius"))?bt(h/(u?e.getBBox()[f?"width":"height"]:e[d])*100):(c[f?"width":"height"]=100+(_?l:i),s=~r.indexOf("adius")||"em"===i&&e.appendChild&&!p?e:e.parentNode,u&&(s=(e.ownerSVGElement||{}).parentNode),s&&s!==fr&&s.appendChild||(s=fr.body),(o=s._gsap)&&m&&o.width&&f&&o.time===we.time?bt(h/o.width*100):((m||"%"===l)&&(c.position=jr(e,"position")),s===e&&(c.position="static"),s.appendChild(_r),a=_r[d],s.removeChild(_r),c.position="absolute",f&&m&&((o=gt(s)).time=we.time,o.width=s[d]),bt(_?a*h/100:a&&h?100/a*h:0))))},tn=function(t,e,r,n){var i;return dr||Vr(),e in Cr&&"transform"!==e&&~(e=Cr[e]).indexOf(",")&&(e=e.split(",")[0]),yr[e]&&"transform"!==e?(i=fn(t,n),i="transformOrigin"!==e?i[e]:pn(jr(t,Ur))+" "+i.zOrigin+"px"):(!(i=t.style[e])||"auto"===i||n||~(i+"").indexOf("calc("))&&(i=an[e]&&an[e](t,e,r)||jr(t,e)||vt(t,e)||("opacity"===e?1:0)),r&&!~(i+"").indexOf(" ")?Kr(t,e,i,r)+r:i},en=function(t,e,r,n){if(!r||"none"===r){var i=Yr(e,t,1),a=i&&jr(t,i,1);a&&a!==r&&(e=i,r=a)}var s,o,u,h,l,c,f,p,d,_,m,g,v=new sr(this._pt,t.style,e,0,1,tr),y=0,b=0;if(v.b=r,v.e=n,r+="","auto"===(n+="")&&(t.style[e]=n,n=jr(t,e)||n,t.style[e]=r),xe(s=[r,n]),n=s[1],u=(r=s[0]).match(Z)||[],(n.match(Z)||[]).length){for(;o=Z.exec(n);)f=o[0],d=n.substring(y,o.index),l?l=(l+1)%5:"rgba("!==d.substr(-5)&&"hsla("!==d.substr(-5)||(l=1),f!==(c=u[b++]||"")&&(h=parseFloat(c)||0,m=c.substr((h+"").length),(g="="===f.charAt(1)?+(f.charAt(0)+"1"):0)&&(f=f.substr(2)),p=parseFloat(f),_=f.substr((p+"").length),y=Z.lastIndex-_.length,_||(_=_||D.units[e]||m,y===n.length&&(n+=_,v.e+=_)),m!==_&&(h=Kr(t,e,c,_)||0),v._pt={_next:v._pt,p:d||1===b?d:",",s:h,c:g?g*p:p-h,m:l&&l<4?Math.round:0});v.c=y<n.length?n.substring(y,n.length):""}else v.r="display"===e&&"none"===n?Er:Pr;return K.test(n)&&(v.e=0),this._pt=v,v},rn={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},nn=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var r,n,i,a=e.t,s=a.style,o=e.u,u=a._gsap;if("all"===o||!0===o)s.cssText="",n=1;else for(i=(o=o.split(",")).length;--i>-1;)r=o[i],yr[r]&&(n=1,r="transformOrigin"===r?Ur:Nr),Zr(a,r);n&&(Zr(a,Nr),u&&(u.svg&&a.removeAttribute("transform"),fn(a,1),u.uncache=1))}},an={clearProps:function(t,e,r,n,i){if("isFromStart"!==i.data){var a=t._pt=new sr(t._pt,e,r,0,0,nn);return a.u=n,a.pr=-10,a.tween=i,t._props.push(r),1}}},sn=[1,0,0,1,0,0],on={},un=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},hn=function(t){var e=jr(t,Nr);return un(e)?sn:e.substr(7).match(Q).map(bt)},ln=function(t,e){var r,n,i,a,s=t._gsap||gt(t),o=t.style,u=hn(t);return s.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(u=[(i=t.transform.baseVal.consolidate().matrix).a,i.b,i.c,i.d,i.e,i.f]).join(",")?sn:u:(u!==sn||t.offsetParent||t===pr||s.svg||(i=o.display,o.display="block",(r=t.parentNode)&&t.offsetParent||(a=1,n=t.nextSibling,pr.appendChild(t)),u=hn(t),i?o.display=i:Zr(t,"display"),a&&(n?r.insertBefore(t,n):r?r.appendChild(t):pr.removeChild(t))),e&&u.length>6?[u[0],u[1],u[4],u[5],u[12],u[13]]:u)},cn=function(t,e,r,n,i,a){var s,o,u,h=t._gsap,l=i||ln(t,!0),c=h.xOrigin||0,f=h.yOrigin||0,p=h.xOffset||0,d=h.yOffset||0,_=l[0],m=l[1],g=l[2],v=l[3],y=l[4],b=l[5],x=e.split(" "),w=parseFloat(x[0])||0,T=parseFloat(x[1])||0;r?l!==sn&&(o=_*v-m*g)&&(u=w*(-m/o)+T*(_/o)-(_*b-m*y)/o,w=w*(v/o)+T*(-g/o)+(g*b-v*y)/o,T=u):(w=(s=Wr(t)).x+(~x[0].indexOf("%")?w/100*s.width:w),T=s.y+(~(x[1]||x[0]).indexOf("%")?T/100*s.height:T)),n||!1!==n&&h.smooth?(y=w-c,b=T-f,h.xOffset=p+(y*_+b*g)-y,h.yOffset=d+(y*m+b*v)-b):h.xOffset=h.yOffset=0,h.xOrigin=w,h.yOrigin=T,h.smooth=!!n,h.origin=e,h.originIsAbsolute=!!r,t.style[Ur]="0px 0px",a&&(Jr(a,h,"xOrigin",c,w),Jr(a,h,"yOrigin",f,T),Jr(a,h,"xOffset",p,h.xOffset),Jr(a,h,"yOffset",d,h.yOffset)),t.setAttribute("data-svg-origin",w+" "+T)},fn=function(t,e){var r=t._gsap||new Be(t);if("x"in r&&!e&&!r.uncache)return r;var n,i,a,s,o,u,h,l,c,f,p,d,_,m,g,v,y,b,x,w,T,k,M,C,O,A,S,P,E,R,z,B,F=t.style,L=r.scaleX<0,I=jr(t,Ur)||"0";return n=i=a=u=h=l=c=f=p=0,s=o=1,r.svg=!(!t.getCTM||!Qr(t)),m=ln(t,r.svg),r.svg&&(C=!r.uncache&&t.getAttribute("data-svg-origin"),cn(t,C||I,!!C||r.originIsAbsolute,!1!==r.smooth,m)),d=r.xOrigin||0,_=r.yOrigin||0,m!==sn&&(b=m[0],x=m[1],w=m[2],T=m[3],n=k=m[4],i=M=m[5],6===m.length?(s=Math.sqrt(b*b+x*x),o=Math.sqrt(T*T+w*w),u=b||x?wr(x,b)*br:0,(c=w||T?wr(w,T)*br+u:0)&&(o*=Math.cos(c*xr)),r.svg&&(n-=d-(d*b+_*w),i-=_-(d*x+_*T))):(B=m[6],R=m[7],S=m[8],P=m[9],E=m[10],z=m[11],n=m[12],i=m[13],a=m[14],h=(g=wr(B,E))*br,g&&(C=k*(v=Math.cos(-g))+S*(y=Math.sin(-g)),O=M*v+P*y,A=B*v+E*y,S=k*-y+S*v,P=M*-y+P*v,E=B*-y+E*v,z=R*-y+z*v,k=C,M=O,B=A),l=(g=wr(-w,E))*br,g&&(v=Math.cos(-g),z=T*(y=Math.sin(-g))+z*v,b=C=b*v-S*y,x=O=x*v-P*y,w=A=w*v-E*y),u=(g=wr(x,b))*br,g&&(C=b*(v=Math.cos(g))+x*(y=Math.sin(g)),O=k*v+M*y,x=x*v-b*y,M=M*v-k*y,b=C,k=O),h&&Math.abs(h)+Math.abs(u)>359.9&&(h=u=0,l=180-l),s=bt(Math.sqrt(b*b+x*x+w*w)),o=bt(Math.sqrt(M*M+B*B)),g=wr(k,M),c=Math.abs(g)>2e-4?g*br:0,p=z?1/(z<0?-z:z):0),r.svg&&(C=t.getAttribute("transform"),r.forceCSS=t.setAttribute("transform","")||!un(jr(t,Nr)),C&&t.setAttribute("transform",C))),Math.abs(c)>90&&Math.abs(c)<270&&(L?(s*=-1,c+=u<=0?180:-180,u+=u<=0?180:-180):(o*=-1,c+=c<=0?180:-180)),r.x=((r.xPercent=n&&Math.round(t.offsetWidth/2)===Math.round(-n)?-50:0)?0:n)+"px",r.y=((r.yPercent=i&&Math.round(t.offsetHeight/2)===Math.round(-i)?-50:0)?0:i)+"px",r.z=a+"px",r.scaleX=bt(s),r.scaleY=bt(o),r.rotation=bt(u)+"deg",r.rotationX=bt(h)+"deg",r.rotationY=bt(l)+"deg",r.skewX=c+"deg",r.skewY=f+"deg",r.transformPerspective=p+"px",(r.zOrigin=parseFloat(I.split(" ")[2])||0)&&(F[Ur]=pn(I)),r.xOffset=r.yOffset=0,r.force3D=D.force3D,r.renderTransform=r.svg?gn:vr?mn:_n,r.uncache=0,r},pn=function(t){return(t=t.split(" "))[0]+" "+t[1]},dn=function(t,e,r){var n=Jt(e);return bt(parseFloat(e)+parseFloat(Kr(t,"x",r+"px",n)))+n},_n=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,mn(t,e)},mn=function(t,e){var r=e||this,n=r.xPercent,i=r.yPercent,a=r.x,s=r.y,o=r.z,u=r.rotation,h=r.rotationY,l=r.rotationX,c=r.skewX,f=r.skewY,p=r.scaleX,d=r.scaleY,_=r.transformPerspective,m=r.force3D,g=r.target,v=r.zOrigin,y="",b="auto"===m&&t&&1!==t||!0===m;if(v&&("0deg"!==l||"0deg"!==h)){var x,w=parseFloat(h)*xr,T=Math.sin(w),k=Math.cos(w);w=parseFloat(l)*xr,x=Math.cos(w),a=dn(g,a,T*x*-v),s=dn(g,s,-Math.sin(w)*-v),o=dn(g,o,k*x*-v+v)}"0px"!==_&&(y+="perspective("+_+") "),(n||i)&&(y+="translate("+n+"%, "+i+"%) "),(b||"0px"!==a||"0px"!==s||"0px"!==o)&&(y+="0px"!==o||b?"translate3d("+a+", "+s+", "+o+") ":"translate("+a+", "+s+") "),"0deg"!==u&&(y+="rotate("+u+") "),"0deg"!==h&&(y+="rotateY("+h+") "),"0deg"!==l&&(y+="rotateX("+l+") "),"0deg"===c&&"0deg"===f||(y+="skew("+c+", "+f+") "),1===p&&1===d||(y+="scale("+p+", "+d+") "),g.style[Nr]=y||"translate(0, 0)"},gn=function(t,e){var r,n,i,a,s,o=e||this,u=o.xPercent,h=o.yPercent,l=o.x,c=o.y,f=o.rotation,p=o.skewX,d=o.skewY,_=o.scaleX,m=o.scaleY,g=o.target,v=o.xOrigin,y=o.yOrigin,b=o.xOffset,x=o.yOffset,w=o.forceCSS,T=parseFloat(l),k=parseFloat(c);f=parseFloat(f),p=parseFloat(p),(d=parseFloat(d))&&(p+=d=parseFloat(d),f+=d),f||p?(f*=xr,p*=xr,r=Math.cos(f)*_,n=Math.sin(f)*_,i=Math.sin(f-p)*-m,a=Math.cos(f-p)*m,p&&(d*=xr,s=Math.tan(p-d),i*=s=Math.sqrt(1+s*s),a*=s,d&&(s=Math.tan(d),r*=s=Math.sqrt(1+s*s),n*=s)),r=bt(r),n=bt(n),i=bt(i),a=bt(a)):(r=_,a=m,n=i=0),(T&&!~(l+"").indexOf("px")||k&&!~(c+"").indexOf("px"))&&(T=Kr(g,"x",l,"px"),k=Kr(g,"y",c,"px")),(v||y||b||x)&&(T=bt(T+v-(v*r+y*i)+b),k=bt(k+y-(v*n+y*a)+x)),(u||h)&&(s=g.getBBox(),T=bt(T+u/100*s.width),k=bt(k+h/100*s.height)),s="matrix("+r+","+n+","+i+","+a+","+T+","+k+")",g.setAttribute("transform",s),w&&(g.style[Nr]=s)},vn=function(t,e,r,n,i,a){var s,o,u=N(i),h=parseFloat(i)*(u&&~i.indexOf("rad")?br:1),l=a?h*a:h-n,c=n+l+"deg";return u&&("short"===(s=i.split("_")[1])&&(l%=360)!==l%180&&(l+=l<0?360:-360),"cw"===s&&l<0?l=(l+36e9)%360-360*~~(l/360):"ccw"===s&&l>0&&(l=(l-36e9)%360-360*~~(l/360))),t._pt=o=new sr(t._pt,e,r,n,l,Ar),o.e=c,o.u="deg",t._props.push(r),o},yn=function(t,e,r){var n,i,a,s,o,u,h,l=mr.style,c=r._gsap;for(i in l.cssText=getComputedStyle(r).cssText+";position:absolute;display:block;",l[Nr]=e,fr.body.appendChild(mr),n=fn(mr,1),yr)(a=c[i])!==(s=n[i])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(i)<0&&(o=Jt(a)!==(h=Jt(s))?Kr(r,i,a,h):parseFloat(a),u=parseFloat(s),t._pt=new sr(t._pt,c,i,o,u-o,Or),t._pt.u=h||0,t._props.push(i));fr.body.removeChild(mr)};yt("padding,margin,Width,Radius",(function(t,e){var r="Top",n="Right",i="Bottom",a="Left",s=(e<3?[r,n,i,a]:[r+a,r+n,i+n,i+a]).map((function(r){return e<2?t+r:"border"+r+t}));an[e>1?"border"+t:t]=function(t,e,r,n,i){var a,o;if(arguments.length<4)return a=s.map((function(e){return tn(t,e,r)})),5===(o=a.join(" ")).split(a[0]).length?a[0]:o;a=(n+"").split(" "),o={},s.forEach((function(t,e){return o[t]=a[e]=a[e]||a[(e-1)/2|0]})),t.init(e,o,i)}}));var bn,xn,wn={name:"css",register:Vr,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,r,n,i){var a,s,o,u,h,l,c,f,p,d,_,m,g,v,y,b,x,w,T,k=this._props,M=t.style;for(c in dr||Vr(),e)if("autoRound"!==c&&(s=e[c],!ct[c]||!Xe(c,e,r,n,t,i)))if(h=typeof s,l=an[c],"function"===h&&(h=typeof(s=s.call(r,n,t,i))),"string"===h&&~s.indexOf("random(")&&(s=ue(s)),l)l(this,t,c,s,r)&&(y=1);else if("--"===c.substr(0,2))this.add(M,"setProperty",getComputedStyle(t).getPropertyValue(c)+"",s+"",n,i,0,0,c);else{if(a=tn(t,c),u=parseFloat(a),(d="string"===h&&"="===s.charAt(1)?+(s.charAt(0)+"1"):0)&&(s=s.substr(2)),o=parseFloat(s),c in Cr&&("autoAlpha"===c&&(1===u&&"hidden"===tn(t,"visibility")&&o&&(u=0),Jr(this,M,"visibility",u?"inherit":"hidden",o?"inherit":"hidden",!o)),"scale"!==c&&"transform"!==c&&~(c=Cr[c]).indexOf(",")&&(c=c.split(",")[0])),_=c in yr)if(m||((g=t._gsap).renderTransform||fn(t),v=!1!==e.smoothOrigin&&g.smooth,(m=this._pt=new sr(this._pt,M,Nr,0,1,g.renderTransform,g,0,-1)).dep=1),"scale"===c)this._pt=new sr(this._pt,g,"scaleY",g.scaleY,d?d*o:o-g.scaleY),k.push("scaleY",c),c+="X";else{if("transformOrigin"===c){x=void 0,w=void 0,T=void 0,x=(b=s).split(" "),w=x[0],T=x[1]||"50%","top"!==w&&"bottom"!==w&&"left"!==T&&"right"!==T||(b=w,w=T,T=b),x[0]=rn[w]||w,x[1]=rn[T]||T,s=x.join(" "),g.svg?cn(t,s,0,v,0,this):((p=parseFloat(s.split(" ")[2])||0)!==g.zOrigin&&Jr(this,g,"zOrigin",g.zOrigin,p),Jr(this,M,c,pn(a),pn(s)));continue}if("svgOrigin"===c){cn(t,s,1,v,0,this);continue}if(c in on){vn(this,g,c,u,s,d);continue}if("smoothOrigin"===c){Jr(this,g,"smooth",g.smooth,s);continue}if("force3D"===c){g[c]=s;continue}if("transform"===c){yn(this,s,t);continue}}else c in M||(c=Yr(c)||c);if(_||(o||0===o)&&(u||0===u)&&!Mr.test(s)&&c in M)o||(o=0),(f=(a+"").substr((u+"").length))!==(p=(s+"").substr((o+"").length)||(c in D.units?D.units[c]:f))&&(u=Kr(t,c,a,p)),this._pt=new sr(this._pt,_?g:M,c,u,d?d*o:o-u,"px"!==p||!1===e.autoRound||_?Or:Dr),this._pt.u=p||0,f!==p&&(this._pt.b=a,this._pt.r=Sr);else if(c in M)en.call(this,t,c,a,s);else{if(!(c in t)){it(c,s);continue}this.add(t,c,t[c],s,n,i)}k.push(c)}y&&ar(this)},get:tn,aliases:Cr,getSetter:function(t,e,r){var n=Cr[e];return n&&n.indexOf(",")<0&&(e=n),e in yr&&e!==Ur&&(t._gsap.x||tn(t,"x"))?r&&gr===r?"scale"===e?Fr:Br:(gr=r||{})&&("scale"===e?Lr:Ir):t.style&&!j(t.style[e])?Rr:~e.indexOf("-")?zr:Je(t,e)},core:{_removeProperty:Zr,_getMatrix:ln}};lr.utils.checkPrefix=Yr,xn=yt("x,y,z,scale,scaleX,scaleY,xPercent,yPercent,"+(bn="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){yr[t]=1})),yt(bn,(function(t){D.units[t]="deg",on[t]=1})),Cr[xn[13]]="x,y,z,scale,scaleX,scaleY,xPercent,yPercent,"+bn,yt("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");Cr[e[1]]=xn[e[0]]})),yt("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){D.units[t]="px"})),lr.registerPlugin(wn);var Tn=lr.registerPlugin(wn)||lr;Tn.core.Tween;function kn(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Mn(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var Cn=function(){function t(e,r){var n=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{numberOfBars:20};kn(this,t),this.container=e,this.visualContainer=this.container.querySelector("#visual"),this.audioPath=r,this.btnPlay=this.container.querySelector("#btn__play"),this.playingState=0,this.audio=document.createElement("audio"),this.audio.src=this.audioPath,this.numberOfBars=i.numberOfBars,this.initDomCallback=null,this.renderBarCallback=null,this.audio.addEventListener("canplay",(function(){n.btnPlay.style.display="flex"})),window.addEventListener("resize",this.onResize.bind(this))}var e,r,n;return e=t,(r=[{key:"init",value:function(){var t=this;this.audioCtx=new(window.AudioContext||window.webkitAudioContext),this.analyser=this.audioCtx.createAnalyser(),this.analyser.fftSize=256,this.bufferLength=this.analyser.frequencyBinCount,this.dataArray=new Uint8Array(this.bufferLength),this.audioCtx.createMediaElementSource(this.audio).connect(this.analyser),this.analyser.connect(this.audioCtx.destination),this.audio.addEventListener("ended",(function(){t.audio.currentTime=0})),this.initDom(),this.createEventListeners()}},{key:"setBars",value:function(t){this.numberOfBars=t}},{key:"initDom",value:function(){if(this.bars=[],this.visualContainer.innerHTML="",null!==this.initDomCallback){if(this.bars=this.initDomCallback(),this.bars){this.numberOfBars=this.bars.length;for(var t=0;t<this.bars.length;t++)this.visualContainer.appendChild(this.bars[t])}}else for(var e=0;e<this.numberOfBars;e++){var r=document.createElement("div");r.classList.add("bar"),this.bars.push(r),this.visualContainer.appendChild(r)}this.dataArray.length>0&&this.bars&&this.drawBars()}},{key:"onCreateDom",value:function(t){this.initDomCallback=t}},{key:"drawBars",value:function(){if(this.bars&&this.bars.length>0)for(var t=Math.ceil(.7*this.dataArray.length),e=Math.floor(t/this.bars.length),r=this.viewport.height/2,n=this.viewport.width/this.bars.length,i=0;i<this.bars.length;i++)null!==this.renderBarCallback?this.renderBarCallback(this.bars[i],this.dataArray[i*e],{index:i,x:i*n,y:r,width:n,height:this.dataArray[i*e]}):(this.bars[i].style.left="".concat(i*n,"px"),this.bars[i].style.top="".concat(r-this.dataArray[i*e],"px"),this.bars[i].style.width="".concat(n,"px"),this.bars[i].style.height="".concat(this.dataArray[i*e],"px"),this.bars[i].style.background="rgba(".concat(.5*this.dataArray[i*e],", 0, 0, 1.0)"))}},{key:"onRenderBar",value:function(t){this.renderBarCallback=t}},{key:"onResize",value:function(){this.drawBars(this.dataArray)}},{key:"createEventListeners",value:function(){var t=this;this.btnPlay.addEventListener("click",(function(){0==t.playingState?t.audioCtx.resume().then((function(){t.audio.play(),t.animate()})):(t.audio.pause(),cancelAnimationFrame(t.ANIMATION_FRAME_ID)),t.playingState=!t.playingState,t.upateButtonByState(t.playingState)}))}},{key:"upateButtonByState",value:function(t){var e=this.btnPlay.querySelector(".shape__play"),r=this.btnPlay.querySelector(".shape__pause");1==t?Tn.to(e,{rotateX:90,scale:.2,duration:.15,ease:"power3.out",onComplete:function(){e.style.display="none",Tn.to(r,{startAt:{display:"block",scale:.2,rotateX:90},rotateX:0,scale:1,duration:.15,ease:"power3.out"})}}):Tn.to(r,{rotateX:90,scale:.2,duration:.15,ease:"power3.out",onComplete:function(){r.style.display="none",Tn.to(e,{startAt:{display:"block",scale:.2,rotateX:90},rotateX:0,scale:1,duration:.15,ease:"power3.out"})}})}},{key:"animate",value:function(){this.analyser.getByteFrequencyData(this.dataArray),this.drawBars(),this.ANIMATION_FRAME_ID=requestAnimationFrame(this.animate.bind(this))}},{key:"viewport",get:function(){var t=this.container.clientWidth,e=this.container.clientHeight;return{width:t,height:e,aspectRatio:t/e}}}])&&Mn(e.prototype,r),n&&Mn(e,n),t}();Number.prototype.map=function(t,e,r,n){return(this-t)*(n-r)/(e-t)+r};var On=new Cn(document.querySelector("#app"),"./sample.mp3");On.onCreateDom((function(){for(var t=[],e=0;e<12;e++){var r=360/11*(e-1),n=document.createElement("div");n.classList.add("circle__container"),n.style.transform="rotate(".concat(r,"deg)");var i=document.createElement("div");i.classList.add("circle"),n.appendChild(i),t.push(n)}return t})),On.onRenderBar((function(t,e,r){if(r.index>0){var n=e.map(0,255,0,180),i=n.map(0,180,1,1.8),a=t.querySelector(".circle");a.style.top="".concat(n,"px"),a.style.transform="translate(-50%, -50%) scaleY(".concat(i,")"),Tn.to(t,{rotate:"+=".concat(20*Math.random()-10),duration:.3})}else{var s=e.map(0,255,1,1.2),o=t.querySelector(".circle");o.style.width="200px",o.style.height="200px",o.style.transform="translate(-50%, -50%) scale(".concat(s,")")}3==r.index&&Sn(e)}));var An=document.querySelector(".music__title"),Sn=function(t){var e=t.map(0,255,-2,2),r=e.map(-2,2,-5,5);Tn.to({y:0,x:0},{y:e,x:r,duration:.1,onUpdate:function(){An.style.textShadow="".concat(r,"px -").concat(e,"px 2px #32e0c4, -").concat(r,"px ").concat(e,"px 2px #fc5185")}})};On.init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,